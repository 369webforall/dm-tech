// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum user_role {
  user
  admin
  student
}

model User {
  id                 String               @id @default(cuid())
  name               String
  email              String
  emailVerified      Boolean              @default(false)
  image              String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  twoFactorEnabled   Boolean              @default(false)
  role               user_role            @default(user)
  Session            Session[]
  Account            Account[]
  Purchase           Purchase[]
  UserCourseAccess   UserCourseAccess[]
  UserLessonComplete UserLessonComplete[]
  CompletedLesson    CompletedLesson[]
  // Simplified Referral System
  referralCode       String?              @unique
  referredById       String?
  referredBy         User?                @relation("UserReferrer", fields: [referredById], references: [id])
  referrals          User[]               @relation("UserReferrer")

  // Commission
  commissionsGiven  ReferralCommission[] @relation("Given")
  commissionsEarned ReferralCommission[] @relation("Earned")

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model Account {
  id           String    @id @default(cuid())
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

enum course_section_status {
  public
  private
}

enum lesson_status {
  public
  private
  preview
}

enum product_status {
  public
  private
}

model Course {
  id               String             @id @default(uuid())
  name             String
  description      String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  notionDoc        String?
  courseProducts   CourseProduct[]
  userCourseAccess UserCourseAccess[]
  courseSections   CourseSection[]
}

model CourseProduct {
  courseId  String
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course  Course  @relation(fields: [courseId], references: [id], onDelete: Restrict)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([courseId, productId])
}

model CourseSection {
  id        String                @id @default(uuid())
  name      String
  status    course_section_status @default(private)
  order     Int
  courseId  String
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]
}

model Lesson {
  id             String        @id @default(uuid())
  name           String
  description    String?
  youtubeVideoId String
  order          Int
  status         lesson_status @default(private)
  sectionId      String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  section             CourseSection        @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  userLessonsComplete UserLessonComplete[]
  CompletedLesson     CompletedLesson[]
}

model Product {
  id             String         @id @default(uuid())
  name           String
  description    String
  imageUrl       String
  priceInDollars Int
  status         product_status @default(private)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  courseProducts CourseProduct[]
  purchases      Purchase[]
}

model Purchase {
  id               String    @id @default(uuid())
  pricePaidInCents Int
  productDetails   Json
  userId           String
  productId        String
  stripeSessionId  String    @unique
  refundedAt       DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Restrict)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)
}

model UserCourseAccess {
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@id([userId, courseId])
}

model UserLessonComplete {
  userId    String
  lessonId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@id([userId, lessonId])
}

model CompletedLesson {
  userId    String
  lessonId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  lesson Lesson @relation(fields: [lessonId], references: [id])

  // Composite primary key
  @@id([userId, lessonId])
}

enum ReferralCommissionStatus {
  pending
  paid
}

model ReferralCommission {
  id             String                   @id @default(cuid())
  referrerId     String
  referredId     String
  amountInRupees Int // default 1000
  status         ReferralCommissionStatus @default(pending)
  createdAt      DateTime                 @default(now())

  referrer User @relation("Given", fields: [referrerId], references: [id])
  referred User @relation("Earned", fields: [referredId], references: [id])
}
